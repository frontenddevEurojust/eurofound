<?php


function ef_factsheet_node_view($node, $view_mode, $langcode) {
  switch ($node->type) {
    case 'ef_factsheet':
      drupal_add_js(drupal_get_path('module', 'ef_factsheet') . '/js/ef_factsheet.js');
      
      	$checkPayment = $node->field_ef_approved_for_payment['und'][0]['value'];
      	$nodeID = $node->nid;
      	$baseURL = $GLOBALS['base_url'];
	  	$settings['field_ef_approved_for_payment'] = variable_get('ef_factsheet', $checkPayment);
		$settings['nid'] = variable_get('ef_factsheet', $nodeID);
		$settings['baseURL'] = variable_get('ef_factsheet', $baseURL);
	  	drupal_add_js(array('ef_factsheet' => $settings), 'setting');
      break;
  }
}



function ef_factsheet_form_alter(&$form, &$form_state, $form_id){
	global $user;
	if($form_id=='ef_factsheet_node_form'){
		$form['field_ef_factsheet_sources']['#access']=FALSE;

   		$form['actions']['submit']['#validate'][] = 'ef_factsheet_form_validate';
		if (in_array('Author', $user->roles)) {
			$form['field_ef_observatory']['#access'] = FALSE;
			$form['field_ef_theme']['#access'] = FALSE;
			$form['#attributes']['class'][]='author-role';
			$form['field_ef_migration_datetime']['#access']=FALSE;
			$form['field_ef_migration_old_url']['#access']=FALSE;
			$form['field_ef_migration_details']['#access']=FALSE;
			$form['field_ef_migration_fact_base_id']['#access']=FALSE;
			$form['field_ef_migration_factsheet_id']['#access']=FALSE;
			$form['field_ef_migration_factsheet_key']['#access']=FALSE;
			$form['field_ef_migration_old_user']['#access']=FALSE;
			$form['field_ef_factsheet_sources']['#access']=FALSE;

		}
		//drupal_add_js(drupal_get_path('module', 'ef_factsheet') . '/js/ef_factsheet.js');
		$form['#attached']['js'][] = drupal_get_path('module','ef_factsheet') . '/js/ef_factsheet.js';


		//Load term Nuts and get de parents
		$term_tid = $form['field_ef_nuts']['und'][0]['tid']['#default_value'];
		$parent_terms = taxonomy_get_parents_all($term_tid);

		
		//Search criteria
		$location_term = $form['field_ef_affected_units']['und'][0]['value']['#default_value'];

		$nuts_term_0 = $parent_terms[0]->name;
		$nuts_term_1 = $parent_terms[1]->name;
		$nuts_term_2 = $parent_terms[2]->name;
		$nuts_term_3 = $parent_terms[3]->name;

		if (!empty($location_term)){
			$location_term_0 = $location_term;
		}

		if (!empty($parent_terms[0]->name)){
			$nuts_term_0 = $parent_terms[0]->name;
		}

		if (!empty($parent_terms[1]->name)){
			$nuts_term_1 = '/' . $parent_terms[1]->name;
		}

		if (!empty($parent_terms[2]->name)){
			$nuts_term_2 = '/' . $parent_terms[2]->name;
		}

		if (!empty($parent_terms[3]->name)){
			$nuts_term_3 = '/' . $parent_terms[3]->name;
		}

		//Set the value to the Province Geolocation Field, The value imports the Nuts taxonomy terms
		$form['field_address']['und'][0]['additional']['#default_value'] = $location_term_0;
		$form['field_address']['und'][0]['province']['#default_value'] = $nuts_term_0 . $nuts_term_1 . $nuts_term_2 .$nuts_term_3 ;

    }
}

function ef_factsheet_form_validate($form, &$form_state) {
	$employed_number = $form_state['values']['field_ef_number_employed']['und'][0]['value'];
	$min_jobs = $form_state['values']['field_ef_job_reductions_min']['und'][0]['value'];
	$min_jobs_int = intval($min_jobs);
	$job_creation = $form_state['values']['field_ef_planned_job_creation']['und'][0]['value'];
	$employed_number_int = intval($employed_number);
	$restructuring = $form_state['values']['field_ef_type_of_restructuring']['und'][0]['tid'];
	$new_location = $form_state['values']['field_ef_new_location']['und'][0]['tid'];
	if(FALSE){
		if(($min_jobs!=0)){
			if($min_jobs_int<25){
				form_set_error('field_ef_job_reductions_min', t('Planned job reductions (min.) must be at least 25.'));
				$form_state['rebuild'] = TRUE;
			}
		}
		if( ($employed_number!=0) && ($min_jobs!=0) ) {

			if( ($min_jobs_int<100) && ( ($employed_number_int/10) > $min_jobs_int)){
				form_set_error('field_ef_number_employed', t('Planned job reductions (min.) must be >= 100, or if not, then at least equal to 10% of number employed.'));
				$form_state['rebuild'] = TRUE;

			}

	}
	}

	if(($min_jobs!=0)){
		$term_id = $form_state['values']['field_ef_type_of_restructuring']['und'][0]['tid'];
		if(intval($term_id)!=1103){
				if(!isset($form_state['values']['field_ef_job_reductions_min']['und'][0]['value']) || empty($form_state['values']['field_ef_job_reductions_min']['und'][0]['value'])){
					form_set_error('field_ef_type_of_restructuring',t('Planned Job Reduction is obligatory for all expansion cases except Bussiness Expansionn.'));
				}
		}
	}

	if ($min_jobs == null && $job_creation== null) {
    	form_set_error('field_ef_job_reductions_min', t('Planned Job Reductions min and Planned Job Creation can not be both empty'));
    	form_set_error('field_ef_planned_job_creation');
 	}

 	if(intval($restructuring) ==1105 &&  $new_location == NULL) {
		form_set_error('field_ef_new_location',t('New Location cannot be blank if “offshoring/ delocalisation” is selected in Type of Restructuring '));
	}
	
}
