<?php

/**
 * Implementation of hook_permission().
 */

/* --- This function creates a new permission to access to 'car_nc_autocreation' page --- [Bilbomatica] */
function ef_car_nc_autocreation_permission() {
  return array(
    'access_car' => array(
      'title' => t('Access to car_nc_autocreation page'),
      'description' => t('Allow access to car_nc_autocreation'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function ef_car_nc_autocreation_menu() {
  $items = array();
  $items['car-nc-autocreation'] = array(
    'title' => 'CAR and National Contribution Autocreation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('car_nc_autocreation_form'),
    'access arguments' => array('access_car'),
  );

   return $items;
}

function car_nc_autocreation_form($form, &$form_submit) {
	$form = array();
	$obse_list = array();
	$vid_obse = taxonomy_vocabulary_machine_name_load('ef_observatories')->vid;
	$obse_tree = taxonomy_get_tree($vid_obse);
	foreach ($obse_tree as $key => $value) {
		$obse_list[$value->tid]=$value->name;
	}

	$sector_list = array();
	$vid_sectors =$vid = taxonomy_vocabulary_machine_name_load('ef_sectors')->vid;
	$sectors_tree = taxonomy_get_tree($vid_sectors);
	foreach ($sectors_tree as $key => $value) {
		$sector_list[$value->tid]=$value->name;
	}

	$topic_list = array();
	$vid_topics =$vid = taxonomy_vocabulary_machine_name_load('ef_topics')->vid;
	$topics_tree = taxonomy_get_tree($vid_topics);
	foreach ($topics_tree as $key => $value) {
		$topic_list[$value->tid]=$value->name;
	}

	$service_list = array();
	$vid_sectors =$vid = taxonomy_vocabulary_machine_name_load('ef_service_types')->vid;
	$services_tree = taxonomy_get_tree($vid_sectors);
	foreach ($services_tree as $key => $value) {
		$service_list[$value->tid]=$value->name;
	}
		
	$deliver_list = array();
	$vid_deliver = taxonomy_vocabulary_machine_name_load('ef_deliverable_kinds')->vid;
	$del_tree = taxonomy_get_tree($vid_deliver);

	foreach ($del_tree as $key => $value) {
		$tax_term = taxonomy_term_load($value->tid);
		
		if ($tax_term->field_ef_nec_period['und'][0]['value'] == "2018 - 2022"){
			$deliver_list[$value->tid]=$value->name;
		}
	}

	$contract_list = array();
	$vid_contract = taxonomy_vocabulary_machine_name_load('ef_contracts')->vid;
	$con_tree = taxonomy_get_tree($vid_contract);

	foreach ($con_tree as $key => $value) {
		$con_term = taxonomy_term_load($value->tid);
		
		if ($con_term->field_ef_nec_period['und'][0]['value'] == "2018 - 2022"){
			$contract_list[$value->tid]=$value->name;
		}
	}
	

	$result  = db_query('select c.iso2,name from {field_data_field_ef_eu_member} m inner join {countries_country} c on c.cid=m.entity_id');
	foreach ($result as $record) {
	  $countriesList[$record->iso2] = $record->name;
	}
	//Added by BM
	//Remove EU Member States option
	unset($countriesList['EM']);
	unset($countriesList['TR']);

	/*
	$groups = entity_load('group');
	$country->field_ef_contract['und'][0]['value'];
	dpm($groups);
	$countriesList2[$groups[2]->gid] = $groups[2]->title;
	dpm($countriesList2);
	*/

	$form['title'] = array(
	 '#title' => t('Title'),
	 '#type' => 'textfield',
	 '#required' => TRUE,
	 '#validated' => TRUE,
	);

	$form['scheduled_record_delivery_date'] = array(
		'#type' => 'date_popup',
		'#title' => t('Scheduled Record Delivery Date'),
		'#date_format' => 'd F Y',
		'#default_value' => date('YYYY/mm/dd'),
		'#date_label_position' => 'within',
		'#datepicker_options' => array(
		'minDate' => 0, //Disable the days previous to the current date
		),
		'#required' => TRUE,
		'#validated' => TRUE,
	);

	$form['national_contribution_deadline'] = array(
		'#type' => 'date_popup',
		'#title' => t('National Contribution Deadline'),
		'#date_format' => 'd F Y',
		'#default_value' => date('YYYY/mm/dd'),
		'#date_label_position' => 'within',
		'#datepicker_options' => array(
    	'minDate' => 0, //Disable the days previous to the current date
  	),
		'#required' => TRUE,
		'#validated' => TRUE,
	);


  $form['obseravory']=array(
		'#type' => 'select',
		'#title' => t('Observatories'),
		'#options' => $obse_list,
		'#required' => FALSE,
		'#multiple' => TRUE,
		'#attributes' => array(
			'class' => array('car-nc-creation'),
	  ),
	);
  
  $form['topic']=array(
		'#type' => 'select',
		'#title' => t('Topics'),
		'#options' => $topic_list,
		'#required' => FALSE,
		'#validated' => TRUE,
		'#multiple' => TRUE,
		'#attributes' => array(
			'class' => array('car-nc-creation'),
	  ),
	);

  $form['sector']=array(
		'#type' => 'select',
		'#title' => t('Sectors'),
		'#options' => $sector_list,
		'#required' => FALSE,
		'#multiple' => TRUE,
		'#attributes' => array(
			'class' => array('car-nc-creation'),
	  ),
	);

	$form['body'] = array(
		'#title' => t('Body'),
		'#type' => 'text_format',
    '#base_type' => 'textarea',
	);


	/* --- Changed by Bilbomatica --- */
	$form['country'] = array(
		'#type' => 'checkboxes',
		'#title' => t('NCs/Countries'),
		'#options' => $countriesList,
		'#required' => TRUE,
		'#validated' => TRUE,
		'#multiple' => TRUE,
	);

	$form['addAllButton'] = array(
		'#type' => 'button',
		'#value' => 'Select all'
	);

	$form['quitAllButton'] = array(
		'#type' => 'button',
		'#value' => 'Remove all'
	);

	$form['contract'] = array(
		'#type' => 'select',
		'#title' => t('Contract'),
		'#options' => $contract_list,
		'#attributes' => array(
			'class' => array('car-nc-creation'),
		),
		'#required' => TRUE,
		'#validated' => TRUE,
	);

	$form['deliver']=array(
		'#type' => 'select',
		'#title' => t('Deliverable Kind'),
		'#options' => $deliver_list,
		'#required' => FALSE,
		'#multiple' => FALSE,
		'#attributes' => array(
			'class' => array('car-nc-creation'),
		),
		'#required' => TRUE,
		'#ajax' => array(
	      	'callback' => 'car_autocreation_deliver_select_ajax',
	      	'wrapper' => 'service-wrap',
	      	'method' => 'replace',
	      	'effect' => 'fade',
	  	),
	  	'#validated' => TRUE,
	);
	
	$form['service']=array(
		'#type' => 'select',
		'#title' => t('Service type'),
		'#prefix' => '<div id="service-wrap">',
		'#suffix' => '</div>',
		'#options' => $service_list,
		'#required' => TRUE,
		'#multiple' => FALSE,
		'#validated' => TRUE,
		
	);


	$form['source_documents'] = array(
  	'#type' => 'file',
  	'#title' => t('Source_documents'),
  );

  $form['upload'] = array(
    '#type' => 'button',
    '#value' => t('Upload file'),
    '#ajax' => array(
      'callback' => 'articles_autocreation_file_upload_ajax',
      'wrapper' => 'file-list-wrapper',
      'method' => 'replace',
      'effect' => 'fade',
  	),
	);

	$header = $header = array(
    'file' => array('data' => t('File')),
    'user' => t('User'),
    'submitted' => array('data' => t('Submitted On')),
    'actions' => array('data' => t('Actions'))
  );
 	
 	if (isset($_SESSION['source_documents']) && !empty($_SESSION['source_documents'])) {

  	$form['file_list'] = array(
			'#prefix' => '<div id="file-list-wrapper">',
			'#suffix' => '</div>',
			'#theme' => 'table',
			'#header' => $header,
		);

 	 	foreach ($_SESSION['source_documents'] as $key => $value) {
 	 		$remove_button = array(
  			'#id' => 'remove_' . $key,
  			'#name' => 'remove_' . $key,
  			'#type' => 'submit',
  			'#value' => t('Remove'),
  			'#submit' => array('remove_file_by_id'),
  			'#attributes' => array('file-id' => $key),
  		);

	  	$form['file_list']['#rows'][$key] = array(
  			'file' => $value['name'],
  			'user' => $user->name,
  			'submitted' => date("d F Y"),
  			'actions' => array('data' => &$remove_button),
  		);
  		$form['file_list']['remove_' . $key] = &$remove_button;
  		unset($remove_button);
  	}

  }
  else {
  	$form['file_list'] = array(
			'#prefix' => '<div id="file-list-wrapper">',
			'#suffix' => '</div>',
			'#theme' => 'table',
			'#header' => $header,
    	'#rows' => $rows,
    	'#empty' => 'No files attached',
    );
  }

	

	/* --- Attached files (bilbomatica) --- */
	$form['#attached']['js'][] = drupal_get_path('module', 'ef_car_nc_autocreation') . '/ef_car_nc_autocreation.js';
	$form['#attached']['css'][] = drupal_get_path('module', 'ef_car_nc_autocreation') . '/ef_car_nc_autocreation.css';
  	/* --- end --- */

  	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Submit',
		'#weight' => 15,
	);

	return $form;
}


function car_nc_autocreation_form_validate($form, &$form_state) {
	//   txt, pdf, doc, docx, xls, xlsx, ppt, pptx
	//   10 MB.
	// File validation

	if(!isset($form_state['clicked_button']['#attributes']['file-id']) && $form_state['clicked_button']['#value']!='Upload file'){
		//Is not the remove button
		
		//validate the requerired fields -Title -Delivery date -Contract -Delivery kind -Service type
		if ($form_state['values']['title']==""){
			form_set_error('title', 'Title field is required');
		}
		
		if ($form_state['values']['scheduled_record_delivery_date']['date']==""){
			form_set_error('scheduled_record_delivery_date', 'Scheduled record delivery date field is required');
		}

		if ($form_state['values']['contract']==""){
			form_set_error('contract', 'Contract field is required');
		}

		if ($form_state['values']['deliver']==""){
			form_set_error('deliver', 'Delivery field is required');
		}

		if ($form_state['values']['service']==""){
			form_set_error('service', 'Service field is required');
		}

		$selectedCountries = array();
		foreach ($form_state['values']['country'] as $key => $value) {
			if($value != '0'){
				$selectedCountries[] = $key;
			}
		}
		
		if (count($selectedCountries)==0){
			form_set_error('country', 'NCs/Countries field is required');
		}

		
	}
}

function remove_file_by_id($form, &$form_state){
	$key = $form_state['clicked_button']['#attributes']['file-id'];
	unset($_SESSION['source_documents'][$key]);
	unset($_SESSION['documents'][$key]);
}

function car_nc_autocreation_form_submit($form, &$form_state){
	global $user;

	/* --- check selected countries --- */
	$selectedCountries = array();
	foreach ($form_state['values']['country'] as $key => $value) {
		if($value != '0'){
			$selectedCountries[] = $key;
		}
	}
	/* --- end --- */

	$contributionsIds=array();

	foreach($selectedCountries as $country){
		//$groups = entity_load('group', $country);
		//$country->field_ef_contract['und'][0]['value'];
		$countryName = db_query('select name FROM {countries_country} WHERE iso2 = :code', array(':code' => $country))->fetchField();
		$node = new stdClass();
		$node->language = "en";
		$node->title = $countryName.": ".$form_state['values']['title'];
		$node->type = 'ef_national_contribution';
		$node->language = "en";
		node_object_prepare($node);
		$node->uid = $user->uid;
		$node->field_ef_country['und'][]['iso2']=$country;
	 	$node->field_ef_report_delivery_date['und'][]['value']=date("Y-m-d", strtotime($form_state['values']['national_contribution_deadline']));
		$node->body['en'][0] = array('value'=>$form_state['values']['body']['value'],'format'=>$form_state['values']['body']['format']);

		$term_index = 0 ;
		foreach ($form_state['values']['obseravory'] as $key => $value) {
			$node->field_ef_observatory[LANGUAGE_NONE][$term_index]['tid'] = $value;
			$term_index++;
		}

		$term_index = 0 ;
		foreach ($form_state['values']['topic'] as $key => $value) {
			$node->field_ef_topic[LANGUAGE_NONE][$term_index]['tid'] = $value;
			$term_index++;
		}

		$term_index = 0 ;
		foreach ($form_state['values']['sector'] as $key => $value) {
			$node->field_ef_sector[LANGUAGE_NONE][$term_index]['tid'] = $value;
			$term_index++;
		}
		
		if (isset($form_state['values']['deliver'])){
			$node->field_ef_deliverable_kind['und'][]['tid'] = $form_state['values']['deliver'];
		}

		if (isset($form_state['values']['service'])){
			$node->field_ef_service_type['und'][]['tid'] = $form_state['values']['service'];
		}

		if (isset($form_state['values']['contract'])){
			$node->field_ef_author_contract['und'][]['tid'] = $form_state['values']['contract'];
		}

		$node->status = 0;
		$node->promote = 0;

		$select = "SELECT b.name
							 FROM countries_country b
							 WHERE b.iso2 = :country";
		$country_name = db_query($select,array(':country' => $country))->fetchAll();

		$group = group_load_by_name($country_name[0]->name);
		//$node = nc_contract($node,$group,$form_state['values']['contract']);


		$nodeUrl = url(drupal_get_path_alias('node/'. $node->nid),array('absolute' => TRUE));
		$dsm_title = $node->title;
		$node = node_submit($node); // Prepare node for saving
		
		node_save($node);

		$nodeUrl = url(drupal_get_path_alias('node/'. $node->nid),array('absolute' => TRUE));

		drupal_set_message( "Node: '" . $dsm_title . "' saved!\n");
		drupal_set_message(l("View NC: " . $dsm_title, $nodeUrl));

		workbench_moderation_moderate($node, "requested");
   		field_attach_update('node', $node);
   		$created_nc_nids[] = $node->nid; 

		$contributionsIds[] = $node->nid;
	}


	$node = new stdClass();

	$node->language = "en";
	$node->title = $form_state['values']['title'];
	$node->type = 'ef_comparative_analytical_report';
	node_object_prepare($node);
	$node->uid = $user->uid;
	$node->status = 0;
	$node->promote = 0;
	if (isset($form_state['values']['scheduled_record_delivery_date'])){
		$node->field_ef_report_delivery_date['und'][]['value'] = date("Y-m-d", strtotime($form_state['values']['scheduled_record_delivery_date']));
		$node->field_ef_car_report_deadline['und'][]['value'] = date("Y-m-d", strtotime($form_state['values']['scheduled_record_delivery_date']));
	}
	if (isset($form_state['values']['national_contribution_deadline'])){
		$node->field_ef_contribution_deadline['und'][]['value'] = date("Y-m-d", strtotime($form_state['values']['national_contribution_deadline']));
	}
	$node->body['en'][0] = array('value' => $form_state['values']['body']['value'],'format' => $form_state['values']['body']['format']);

	$term_index = 0 ;
	foreach ($form_state['values']['obseravory'] as $key => $value) {
		$node->field_ef_observatory[LANGUAGE_NONE][$term_index]['tid'] = $value;
		$term_index++;
	}

	$term_index = 0 ;
	foreach ($form_state['values']['topic'] as $key => $value) {
		$node->field_ef_topic[LANGUAGE_NONE][$term_index]['tid'] = $value;
		$term_index++;
	}

	$term_index = 0 ;
	foreach ($form_state['values']['sector'] as $key => $value) {
		$node->field_ef_sector[LANGUAGE_NONE][$term_index]['tid'] = $value;
		$term_index++;
	}

	if (isset($form_state['values']['deliver'])){
		$node->field_ef_deliverable_kind['und'][]['tid'] = $form_state['values']['deliver'];
	}

	if (isset($form_state['values']['service'])){
			$node->field_ef_service_type['und'][]['tid'] = $form_state['values']['service'];
		}

	if (isset($form_state['values']['contract'])){
		$node->field_ef_author_contract['und'][]['tid'] = $form_state['values']['contract'];
	}


	$node = node_submit($node); // Prepare node for saving

	foreach ($contributionsIds as $contributorId) {
		$national[]['target_id'] = $contributorId;
	}
	
	$node->field_ef_national_contribution[LANGUAGE_NONE] = $national;

	$dsm_title = $node->title;

	$group = group_load_by_name("Eurofound");

	$node = node_submit($node); // Prepare node for saving
	node_save($node);

	foreach ($created_nc_nids as $key => $value) {
 		entity_get_controller('node')->resetCache(array($value));
 	}

	$nodeUrl=url(drupal_get_path_alias('node/'. $node->nid),array('absolute' => TRUE));

	drupal_set_message( "Node: '" . $dsm_title . "' saved!\n");
	drupal_set_message(l("View CAR: " . $dsm_title, $nodeUrl));
	drupal_set_message( 'Change the group and contract for the overview report. Contact the web team for support.');

	unset($_SESSION['source_documents']);
  	unset($_SESSION['documents']);
}

function articles_autocreation_file_upload_ajax($form, &$form_state) {
	$allowed_types = array("txt", "pdf", "doc", "docx", "xls", "xlsx", "ppt", "pptx");
	$doc_error = false;
	global $user;

 	$header = $header = array(
    'file' => t('File'),
    'user' => t('User'),
    'submitted' => t('Submitted On'),
    'actions' => t('Actions'),
  );

  if (isset($form['file_list']['files'])) {
  	$files = $form['file_list']['files']['#value'];
  }

  if (isset($form_state['values']['source_documents']) && !empty($form_state['values']['source_documents'])) {
  		$file_name = $form_state['values']['source_documents']['name'];
		$file_size = $form_state['values']['source_documents']['size'];
		$file_type = explode(".",$file_name);
		$file_type_extension = array_pop($file_type);
		if(!in_array($file_type_extension, $allowed_types)){
			
			form_set_error('source_documents','Please provide a file with one of these extensions pdf , txt , doc , docx , xlx , xlsx , log.');
	 		$form_state['rebuild'] = TRUE;
	 		$doc_error = true;

		}
		if($file_size>10000000){
			form_set_error('source_documents', 'File must be below 10MB.');
			$form_state['rebuild'] = TRUE;
			$doc_error = true;
		}

	
	if ($doc_error == false){	
	  	//$_SESSION['source_documents'][] = $form_state['values']['source_documents'];
	}


/**********************************************************SAVE THE DOCUMENTS****************************************/
	
	 $file = file_save_upload('source_documents', array(
	    'file_validate_extensions' => array('pdf xls html doc txt'),
	    // 'file_validate_is_image' => array(),
	  ));
	// If the file passed validation:
	  if (isset($file->filename)) {
	      // Move the file, into the Drupal file system
		  // $newpath = variable_get('file_directory_path');
	  	if ($file = file_move($file, 'public:///ef_comparative_analytical_report/field_ef_source_documents', FILE_EXISTS_RENAME)) {
		// Update the new file location in the database.
	      drupal_write_record('files', $file, 'fid');
	      // Save the file for use in the submit handler.
	      $form_state['storage']['file'][] = $file;
	      $_SESSION['source_documents'][] = $form_state['values']['source_documents'];
	      $_SESSION['documents'][] = $file;

	    }
	    else {
	    	form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
	    }
	  }
	  else {
	    form_set_error('file', t('Invalid file, only images with the extension pdf xls html doc txt are allowed'));
	  }
	  
	  
/**********************************************************SAVE THE DOCUMENTS******************************************/


  	$form['file_list'] = array(
			'#prefix' => '<div id="file-list-wrapper">',
			'#suffix' => '</div>',
			'#theme' => 'table',
			'#header' => $header,
		);

 	foreach ($_SESSION['source_documents'] as $key => $value) {
 		$remove_button = array(
		'#id' => 'remove_' . $key,
		'#name' => 'remove_' . $key,
		'#type' => 'submit',
		'#value' => t('Remove'),
		'#submit' => array('remove_file_by_id'),
		'#attributes' => array('file-id' => $key),
		);

	  	$form['file_list']['#rows'][$key] = array(
  			'file' => $value['name'],
  			'user' => $user->name,
  			'submitted' => date("d F Y"),
  			'actions' => array('data' => &$remove_button),
  		);
  		$form['file_list']['remove_' . $key] = &$remove_button;
  		unset($remove_button);
  	}

  }

		return $form['file_list'];
}



function car_autocreation_deliver_select_ajax($form, &$form_state){
	$deliver_id = $form_state['complete form']['deliver']['#value'];
	$tax_term = taxonomy_term_load($deliver_id);
	$service_list = array("");
	
	if (isset($tax_term->field_ef_service_type['und'][0]['tid'])){
		$opt1 = taxonomy_term_load($tax_term->field_ef_service_type['und'][0]['tid']);
		//$service_list = array($opt1->name);
		$service_list[$tax_term->field_ef_service_type['und'][0]['tid']]=$opt1->name;
	}else{
		$service_list =array();
	}

	if (isset($tax_term->field_ef_service_type['und'][1]['tid'])){
		$opt2 = taxonomy_term_load($tax_term->field_ef_service_type['und'][1]['tid']);
		//$service_list = array($opt1->name,$opt2->name);
		$service_list[$tax_term->field_ef_service_type['und'][1]['tid']]=$opt2->name;
	}

	
	$form['service']['#options'] = $service_list;
	return $form['service'];
	

}
