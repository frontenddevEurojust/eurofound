<?php

/*
 * Implements HOOK_views_query_alter(&$view,&$query)
 */
function ef_authors_as_metadata_views_query_alter(&$view, &$query){

	if ($view->name == 'authors_as_metadata')

	{
		
		$input  = check_plain($view->args[0]);

		$source = drupal_get_normal_path("authors/" . $input);

		$source = explode("/", $source);
		
		$tid = $source[2];
		
		$term = taxonomy_term_load($tid);
		
		$view->build_info['title'] = $term->name;
		
		/*
		if (count($view->exposed_raw_input['tid']) && $view->exposed_raw_input['published_at'] != '')

		{

			$filter = [

				'field' => 'taxonomy_index.tid',

				'value' => $view->exposed_raw_input['tid'],

				'operator' => '=',

			];

			$view->query->where[1]['conditions'][] = $filter;
	
		}
		*/
		
	}

}

/*
 * Implements HOOK_form_alter to change the values of Authors in Blog and Presentation
 */
function ef_authors_as_metadata_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Find the content type of the node we are editing.
  $content_type = $form['#node']->type;
  	if (in_array($form['#node']->type, ['blog','presentation'])){
		$form['field_ef_publ_contributors']['und']['#multiple'] = FALSE;
	}
}



/*
 * Implements HOOK_form_alter(&$view,&$query)
 */
function ef_authors_as_metadata_form_alter(&$form, &$form_state, $form_id){

	if ($form['#id'] == 'views-exposed-form-authors-as-metadata-page-1')

	{
		drupal_add_css(drupal_get_path('module','ef_authors_as_metadata') . '/ef_authors_as_metadata_page.css');
	}



	if ($form['#node_edit_form'] == TRUE && isset($form['field_ef_publ_contributors']))

	{	
		
		if (!in_array($form['#node']->type, ['blog','presentation'])){

			$form['field_ef_publ_contributors']['und']['#description'] = "Introduce authors separated by commas.If it's not available, it can be added with the panel to the right.";

			$form['add_new_contributor_wrapper'] = [

				'#type' => 'container',

	      		'#weight' => $form['field_ef_publ_contributors']['#weight'] + 1,
	    	];

	    	
			$form['add_new_contributor_wrapper']['add_new_contributor'] = [

				'#type' => 'textfield',

				'#title' => t('Add new authors'),

				'#description' => t('New authors should follow the convention:"Last Name, First Name". Use a semicolon to separate multiple values'),

				'#weight' => $form['field_ef_publ_contributors']['#weight'] + 1,

				'#prefix' => '<div id="add-new-publ-contributor">',

				'#suffix' => '</div>',

				'#ajax' => [

					'callback' => 'submit_new_contributors',

					'wrapper' => 'add-new-contributor',

	      			'method' => 'replace',

	      			'effect' => 'fade',

	      			'keypress' => TRUE,

	      			'event' => 'submit',

				],
			];
	

			$form['add_new_contributor_wrapper']['save'] = [

				'#type' => 'button',

				'#value' => t('Add New Author'),

				'#weight' => $form['field_ef_publ_contributors']['#weight'] + 2,

				'#ajax' => [

					'callback' => 'submit_new_contributors',

					'wrapper' => 'add-new-contributor',

	      			'method' => 'replace',

	      			'effect' => 'fade',
				],
			];

		}

		// Add the new form item to the group authors fieldset
		$form['#groups']['group_authors']->children[] = 'add_new_contributor_wrapper';

		$form['#group_children']['add_new_contributor_wrapper'] = 'group_authors';

		
		$form['#attached']['css'][] = drupal_get_path('module','ef_authors_as_metadata') . '/ef_authors_as_metadata_form.css';

		$form['#attached']['js'][] = drupal_get_path('module','ef_authors_as_metadata') . '/ef_authors_as_metadata.js';

		$form['#attached']['js'][] = drupal_get_path('module','ef_authors_as_metadata') . '/ef_authors_as_metadata_error.js';
		
		$form['#attached']['js'][] = drupal_get_path('module','ef_authors_as_metadata') . '/ef_authors_as_metadata_tags.js';


		return $form;
	}

}

/*
*  Implements hook_node_view_alter(&$build).
*/
function ef_authors_as_metadata_node_view_alter(&$build)
{

	$node = $build['#node'];


	if ($node->type == 'ef_report')

	{	
		module_load_include('inc', 'pathauto');
		
		for ($i=0; $i < count($build['field_ef_publ_contributors']['#items']); $i++)

		{

			$publications_query = "select a.entity_id from node b
								inner join field_data_field_ef_publ_contributors a  on b.nid = a.entity_id
								where b.status = 1 AND
								a.bundle = 'ef_publication' AND a.field_ef_publ_contributors_tid = :tid";

			$publications_query = db_query($publications_query, array(':tid' => $build['field_ef_publ_contributors']['#items'][$i]['tid']))->fetchAll();

			if (count($publications_query))

			{
				$url = pathauto_cleanstring($build['field_ef_publ_contributors'][$i]['#markup']);

				$build['field_ef_publ_contributors'][$i]['#markup'] = "<a href='/author/" . $url . "' target='_blank'>" . $build['field_ef_publ_contributors'][$i]['#markup'] . "</a>";
			}
		}
		
	}

}

function submit_new_contributors($form, &$form_state){

	$newAuthors = trim($form_state['values']['add_new_contributor']);

	if ($newAuthors != '')
	{
		$newAuthors = explode(';', $newAuthors);	
	}
	
	try

	{

		$newAuthors = save_new_contributors($newAuthors, $form['nid']['#value']);


		// Empty add new contributor textfield so that it's reloaded correctly
		$form['add_new_contributor_wrapper']['add_new_contributor']['#value'] = '';

		// Replace add new contributor form item
		$commands[] = ajax_command_replace( "#add-new-publ-contributor", render($form['add_new_contributor_wrapper']['add_new_contributor']));

		$commands[] = [

			'command' => 'ChangeLabels'

		];

		$commands[] = [

			// The command will be used in our JavaScript files
			'command' => 'AddTags',

			// We pass the values to the function to be executed
			'newAuthors' => $newAuthors,

			'nid' => $form['nid']['#value'],

		];


		return ['#type' => 'ajax', '#commands' => $commands];

	}

	catch (Exception $e)

	{
		if (strpos("Something needs to be introduced for saving.", $e->getMessage()) !== FALSE)

		{
			

			_clear_authors_as_metadata_variables($form['nid']['#value']);

	  		$commands[] = [

				// The command will be used in our JavaScript files
				'command' => 'EmptyValue',

			];

			// And finally, we will return all of our commands to the system to be executed:
			return ['#type' => 'ajax', '#commands' => $commands];
		}

		else

		{

			
			_clear_authors_as_metadata_variables($form['nid']['#value']);

	  		$commands[] = [

				// The command will be used in our JavaScript files
				'command' => 'ErrorAuthorExists',

				// We pass the values to the function to be executed
				'error' => $e->getMessage(),

			];

			// And finally, we will return all of our commands to the system to be executed:
			return ['#type' => 'ajax', '#commands' => $commands];
		}
	}

}

function save_new_contributors($authors, $nid){

	if ($authors != '')

	{

		$terms = [];

		foreach ($authors as $value)

		{
			// Control for some edge cases
			if (!empty($value))

			{
				// Simple validation for avoiding duplicates
				$exists = check_term_exists($value);

				if ($exists)

				{
					throw new Exception($value);
				}

				$term = build_basic_term($value);

				$response = taxonomy_term_save($term);


				if (!$response)

				{
					throw new Exception('Error saving a new term.');
				}

				$terms[] = $value;

				$_SESSION['authors_as_metadata'][$nid][$term->tid] = $term->tid;

			}

		}

		return $terms;
	}

	else

	{
		
		throw new Exception('Something needs to be introduced for saving.');
	}

	

}

function _clear_authors_as_metadata_variables($nid = null, $tid = null){

	if($nid && $tid == null)

	{
		unset($_SESSION['authors_as_metadata'][$nid]);

		return;
	}

	if($nid && $tid)

	{
		unset($_SESSION['authors_as_metadata'][$nid][$tid]);

		return;
	}

	unset($_SESSION['authors_as_metadata']);

}

function check_term_exists($author){

	$query = "SELECT * FROM taxonomy_term_data a WHERE a.vid = 12 AND a.name = :name";

	$result = db_query($query, [':name' => $author])->fetchObject();

	if (isset($result) && $result != 0)
	{
		return TRUE;
	}

	return FALSE;

}

function ef_authors_as_metadata_node_presave($node){

	$types = ['ef_report', 'ef_publication'];

	if (in_array($node->type, $types))

	{
		if(isset($_SESSION['authors_as_metadata']))

		{
			foreach($_SESSION['authors_as_metadata'][$node->nid] as $tid)

			{
				$node->field_ef_publ_contributors['und'][] = ['tid' => $tid];
			}

			_clear_authors_as_metadata_variables($node->nid);
		}
	}


}

/*
* Implements hook_permission()
*/
function ef_authors_as_metadata_permission(){

    return [

        'access_ef_authors_as_metadata' => [

            'title' => t('Authors as metadata'),

            'description' => t('Enable access to authors as metadata features'),

        ],

    ];

}

/*
* Implements hook_menu()
*/
function ef_authors_as_metadata_menu(){

	//Define URI to remove an author
	$items['authors-as-metadata/delete-author/%/%'] = [

		'page callback' => '_delete_author',

		'page arguments' => array(2,3),

		'type' => MENU_CALLBACK,

		'access arguments' => array('access_ef_authors_as_metadata'),
	];

	return $items;
}



function _delete_author($nid, $termName){

	$term = taxonomy_get_term_by_name(urldecode($termName), $vocabulary = 'ef_publication_contributors');

	$output = taxonomy_term_delete($term[key($term)]->tid);

	_clear_authors_as_metadata_variables($nid, $term[key($term)]->tid);


	if($output == 0)

	{
		drupal_json_output(array('status' => 500, 'data' => 'The term could not be deleted.'));
	}

	drupal_json_output(array('status' => 200, 'data' => 'Term deleted successfully'));

}

function build_basic_term($value, $vid = null){

	if (!isset($vid))

	{
		// Publication Contributor taxonomy
		$vid = 12;
	}


	$term = new stdClass();

	$term->name = $value;

	$term->vid = $vid;

	$topic->description = '';

	$topic->format = 'filtered_html';

	return $term;

}
/*
* Convert old publication-contributors urls into authors/name
*/
function update_old_authors_urls(){

	// Use pathauto and core functions for easier processing
	module_load_include('inc', 'pathauto');

	$authors = taxonomy_get_tree($vid = 12);
	
	unlink("Updated_authors_aliases.txt");

	$fp = fopen("Updated_authors_aliases.txt", "w+");


	foreach ($authors as $term) {

  		
  		$pid = db_query("SELECT pid FROM url_alias WHERE source = :source", [":source" => "taxonomy/term/" . $term->tid])->fetchField();

  		// Remove existing alias. No transliteration is assumed.  		
  		path_delete(['pid' => $pid]);

  		$path = [
  			'source' => 'taxonomy/term/' . $term->tid,
  			'alias' => 'authors/' . pathauto_cleanstring($term->name),
  		];

		// Add alias
  		$saved = _pathauto_set_alias($path);
  		
  		if ($saved){
  			fwrite($fp, "The author " . $term->name . " with " . $term->tid . " was successfully saved with the following alias: " . $saved['alias'] . ". \n");
  		}	

	}

	fclose($fp);
}

/*
 * Implements hook_update_N().
 * Change publication-contributor urls to author/name
 */
function ef_authors_as_metadata_update_7102(){
	update_old_authors_urls();
}
/*
 * Implements hook_update_N().
 * Change all contributors' weight to avoid automatical reordering
 */
function ef_authors_as_metadata_update_7101(){
	
	$query = "UPDATE taxonomy_term_data SET weight = 0 WHERE vid = 12";

	db_query($query);
}
