<?php

/*
 * Implements HOOK_views_query_alter(&$view,&$query)
 */
function ef_authors_as_metadata_views_query_alter(&$view, &$query){

	if ($view->name == 'authors_as_metadata')

	{

		if (count($view->exposed_raw_input['tid']) && $view->exposed_raw_input['published_at'] != '')

		{

			$filter = [

				'field' => 'taxonomy_index.tid',

				'value' => $view->exposed_raw_input['tid'],

				'operator' => '=',

			];

			$view->query->where[1]['conditions'][] = $filter;

		}
	}

}

/*
 * Implements HOOK_form_alter(&$view,&$query)
 */
function ef_authors_as_metadata_form_alter(&$form, &$form_state, $form_id){


	if ($form['#id'] == 'views-exposed-form-authors-as-metadata-page-1')

	{
		drupal_add_css(drupal_get_path('module','ef_authors_as_metadata') . '/ef_authors_as_metadata_page.css');
	}



	if ($form['#node_edit_form'] == TRUE && isset($form['field_ef_publ_contributors']))

	{

		$form['field_ef_publ_contributors']['und']['#description'] = "Introduce authors separated by commas.If it's not available, it can be added with the panel to the right.";

		$form['add_new_contributor_wrapper'] = [

			'#type' => 'container',

      		'#weight' => $form['field_ef_publ_contributors']['#weight'] + 1,
    	];

		$form['add_new_contributor_wrapper']['add_new_contributor'] = [

			'#type' => 'textfield',

			'#title' => t('Add new authors'),

			'#description' => t('New authors should follow the convention:"Last Name, First Name". Use a semicolon to separate multiple values'),

			'#weight' => $form['field_ef_publ_contributors']['#weight'] + 1,

			'#prefix' => '<div id="add-new-publ-contributor">',

			'#suffix' => '</div>',
		];

		$form['add_new_contributor_wrapper']['save'] = [

			'#type' => 'button',

			'#value' => t('Add New Author'),

			'#weight' => $form['field_ef_publ_contributors']['#weight'] + 2,

			'#ajax' => [

				'callback' => 'submit_new_contributors',

				'wrapper' => 'add-new-contributor',

      			'method' => 'replace',

      			'effect' => 'fade',

			],

			'#submit' => ['submit_new_contributors'],
		];

		// Add the new form item to the group authors fieldset
		$form['#groups']['group_authors']->children[] = 'add_new_contributor_wrapper';

		$form['#group_children']['add_new_contributor_wrapper'] = 'group_authors';


		drupal_add_css(drupal_get_path('module','ef_authors_as_metadata') . '/ef_authors_as_metadata_form.css');

		drupal_add_js(drupal_get_path('module','ef_authors_as_metadata') . '/ef_authors_as_metadata.js');

		$form['#attached']['js'] = [

			[
				'type'  => 'file',
				'data' => drupal_get_path('module','ef_authors_as_metadata') . '/ef_authors_as_metadata_error.js',
			],

			[
				'type'  => 'file',
				'data' => drupal_get_path('module','ef_authors_as_metadata') . '/ef_authors_as_metadata_tags.js',
			],

		];


	}

}

/*
*  Implements hook_node_view_alter(&$build).
*/
function ef_authors_as_metadata_node_view_alter(&$build)
{

	$node = $build['#node'];


	if ($node->type == 'ef_report')

	{


		for ($i=0; $i < count($build['field_ef_publ_contributors']['#items']); $i++)

		{

			$publications_query = "select a.entity_id from node b
								inner join field_data_field_ef_publ_contributors a  on b.nid = a.entity_id
								where b.status = 1 AND
								a.bundle = 'ef_publication' AND a.field_ef_publ_contributors_tid = :tid";

			$publications_query = db_query($publications_query, array(':tid' => $build['field_ef_publ_contributors']['#items'][$i]['tid']))->fetchAll();

			if (count($publications_query))

			{
				$url = str_replace(', ','_', strtolower($build['field_ef_publ_contributors'][$i]['#markup']));

				$build['field_ef_publ_contributors'][$i]['#markup'] = "Author: <a href='/author/" . $url . "' target='_blank'>" . $build['field_ef_publ_contributors'][$i]['#markup'] . "</a>";
			}

		}
	}

}

function submit_new_contributors($form, &$form_state){

	$newAuthors = explode(';', $form_state['values']['add_new_contributor']);

	try

	{

		$newAuthors = save_new_contributors($newAuthors, $form['nid']['#value']);


		// Empty add new contributor textfield so that it's reloaded correctly
		$form['add_new_contributor_wrapper']['add_new_contributor']['#value'] = '';

		// Replace add new contributor form item
		$commands[] = ajax_command_replace( "#add-new-publ-contributor", render($form['add_new_contributor_wrapper']['add_new_contributor']) );

		//
		$commands[] = [

			'command' => 'ChangeLabels'

		];

		$commands[] = [

			// The command will be used in our JavaScript files
			'command' => 'AddTags',

			// We pass the values to the function to be executed
			'newAuthors' => $newAuthors,

			'nid' => $form['nid']['#value'],

		];


		return ['#type' => 'ajax', '#commands' => $commands];

	}

	catch (Exception $e)

	{

		_clear_authors_as_metadata_variables($form['nid']['#value']);

  		$commands[] = [

			// The command will be used in our JavaScript files
			'command' => 'Error',

			// We pass the values to the function to be executed
			'error' => $e->getMessage(),

		];

		// And finally, we will return all of our commands to the system to be executed:
		return ['#type' => 'ajax', '#commands' => $commands];

	}

}

function save_new_contributors(array $authors, $nid){

	$terms = [];

	foreach ($authors as $value)

	{
		// Control for some edge cases
		if (!empty($value))

		{
			// Simple validation for avoiding duplicates
			$exists = check_term_exists($value);

			if ($exists)

			{
				throw new Exception($value);
			}

			$term = build_basic_term($value);

			$response = taxonomy_term_save($term);


			if (!$response)

			{
				throw new Exception('Error saving a new term.');
			}

			$terms[] = $value;

			$_SESSION['authors_as_metadata'][$nid][$term->tid] = $term->tid;

		}

	}

	return $terms;

}

function _clear_authors_as_metadata_variables($nid = null, $tid = null){

	if($nid && $tid == null)

	{
		unset($_SESSION['authors_as_metadata'][$nid]);

		return;
	}

	if($nid && $tid)

	{
		unset($_SESSION['authors_as_metadata'][$nid][$tid]);

		return;
	}

	unset($_SESSION['authors_as_metadata']);

}

function check_term_exists($author){

	$query = "SELECT * FROM taxonomy_term_data a WHERE a.vid = 12 AND a.name = :name";

	$result = db_query($query, [':name' => $author])->fetchObject();

	if (isset($result) && $result != 0)
	{
		return TRUE;
	}

	return FALSE;

}

function ef_authors_as_metadata_node_presave($node){

	$types = ['ef_report', 'ef_publication'];

	if (in_array($node->type, $types))

	{
		if(isset($_SESSION['authors_as_metadata']))

		{
			foreach($_SESSION['authors_as_metadata'][$node->nid] as $tid)

			{
				$node->field_ef_publ_contributors['und'][] = ['tid' => $tid];
			}

			_clear_authors_as_metadata_variables($node->nid);
		}
	}


}

/*
* Implements hook_permission()
*/
function ef_authors_as_metadata_permission(){

    return [

        'access_ef_authors_as_metadata' => [

            'title' => t('Authors as metadata'),

            'description' => t('Enable access to authors as metadata features'),

        ],

    ];

}

/*
* Implements hook_menu()
*/
function ef_authors_as_metadata_menu(){

	//Define URI to remove an author
	$items['authors-as-metadata/delete-author/%/%'] = [

		'page callback' => '_delete_author',

		'page arguments' => array(2,3),

		'type' => MENU_CALLBACK,

		'access arguments' => array('access_ef_authors_as_metadata'),
	];

	return $items;
}



function _delete_author($nid, $termName){

	$term = taxonomy_get_term_by_name(urldecode($termName), $vocabulary = 'ef_publication_contributors');

	$output = taxonomy_term_delete($term[key($term)]->tid);

	_clear_authors_as_metadata_variables($nid, $term[key($term)]->tid);


	if($output == 0)

	{
		drupal_json_output(array('status' => 500, 'data' => 'The term could not be deleted.'));
	}

	drupal_json_output(array('status' => 200, 'data' => 'Term deleted successfully'));

}

function build_basic_term($value, $vid = null){

	if (!isset($vid))

	{
		// Publication Contributor taxonomy
		$vid = 12;
	}


	$term = new stdClass();

	$term->name = $value;

	$term->vid = $vid;

	$topic->description = '';

	$topic->format = 'filtered_html';

	return $term;

}

/*
function update_publ_contributors(){


    $tax = taxonomy_get_tree('12');

    foreach ($tax as $key => $entity)

    {

        $term = taxonomy_term_load($entity->tid);

        if(!isset($term->description))

        {
        	$term->description = '';
        }

        if(!isset($term->format))

        {
        	$term->format = 'filtered_html';
        }

        taxonomy_term_save($term);

    }


}
*/
