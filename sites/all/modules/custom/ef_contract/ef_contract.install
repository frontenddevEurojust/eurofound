<?php

/**
 * Implements hook_install()
 *
 * Change the weight of the module.
 * This module's hook implementations will be the last to run, we need them to run after
 * workbench moderation's implemntations
 */
function ef_contract_install() {
  db_update('system')
    ->fields(array('weight' => 100))
    ->condition('name', 'ef_contract', '=')
    ->execute();
}

/**
 * Implements hook_update_N()
 *
 * Performs all the needed changes for the new NEC framework
 */
function ef_contract_update_7001() {
  $schema['ef_contract_affected_cts'] = array(
    'description' => t('Table to store content types affected by NEC'),
    'fields' => array(
      'ctid' => array(
        'description' => 'ID of the content type',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'machine_name' => array(
        'description' => 'Machine name of the Content Type',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Human name of the Content Type',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'enabled' => array(
        'description' => 'Boolean, true (1) if the Content Type is managed under NEC',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'ctid' => array('ctid'),
    ),
    'primary key' => array('ctid'),
  );
  
  db_create_table('ef_contract_affected_cts', $schema['ef_contract_affected_cts']);


  $enabled_cts = array(
    'ef_report',
    'ef_comparative_analytical_report',
    'ef_national_contribution',
    'ef_ic_quarterly_report',
    'ef_input_to_erm',
    'ef_case_study',
    'erm_support_instrument',
    'ef_erm_regulation',
    'ef_restructuring_in_smes',
    'ef_factsheet',
    'ef_ir_dictionary',
    'ef_annual_progress_report',
    'ef_network_quarterly_report',
    'case_study_publication',
    'ef_working_life_country_profiles',
  );

  $cts = node_type_get_types();

  foreach($cts as $key => $ct) {
    $query = db_insert('ef_contract_affected_cts');
    $query->fields(
      array(
        'machine_name' => $ct->type,
        'name' => $ct->name,
        'enabled' => in_array($key, $enabled_cts) ? 1 : 0,
      )
    );

    $query->execute();
  }
}

/**
 * Requested by client on WGS-356
 * Update support instruments, regulations and factsheets
 */
function ef_contract_update_7003() {
  //Populate variables
  $vocabulary = taxonomy_vocabulary_machine_name_load('ef_contracts');
  $contracts = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
  $groups = get_country_groups();

  //ERM Support instruments
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'));
  $query->condition('n.type', 'erm_support_instrument');

  $results = $query->execute()->fetchCol();

  $type = 'erm_support_instrument';
  $dk_tid = get_default_deliverable_kind_by_ct($type);
  $service_type = get_service_type($dk_tid);
  $service_type = reset($service_type);
  
  foreach ($results as $nid) {
    $vid = get_node_current_vid($nid);
    $node = node_load($nid, $vid);
    $node->field_ef_deliverable_kind['und'][0]['tid'] = $dk_tid;
    $node->field_ef_service_type['und'][0]['tid'] = $service_type;
    //WGS-367 requirement: Approved for Payment must be empty for 
    //Support Instruments and Regulations
    $node->field_ef_approved_for_payment = array();
    $node->field_ef_author_contract['und'][0]['tid'] = get_equivalent_new_contract($node->field_ef_author_contract['und'][0]['tid'], $contracts);
    $gid = $node->field_ef_assign_to_country_group['und'][0]['target_id'];
    $group = group_load($gid);
    $pos = strpos($group->title, '2014-2018');
    if ($pos !== false) {
      $period = '/ 2014-2018/';
      $replace = '';
      $new_country_group_name = preg_replace($period, $replace, $group->title);
      foreach ($groups as $gid => $title) {
        if ($title == $new_country_group_name) {
          $node->field_ef_assign_to_country_group['und'][0]['target_id'] = $gid;
        }
      }
    }
    $user = get_user_by_mid($node->field_ef_assign_to_author['und'][0]['target_id']);
    if (!isset($user->uid)) {
      $node->field_ef_assign_to_author['und'][0]['target_id'] = get_leader_mid_by_gid($node->field_ef_assign_to_country_group['und'][0]['target_id']);
    }
    field_attach_update('node', $node);
    print_r('values updated || ');
    entity_get_controller('node')->resetCache(array($node->nid));
    print_r('cache updated || ');
  }

  //Factsheets
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'));
  $query->fields('ad', array('field_ef_announcement_date_value'));
  $query->join('field_data_field_ef_announcement_date', 'ad', 'n.nid = ad.entity_id');
  $query->condition('n.type', 'ef_factsheet');

  $results = $query->execute()->fetchAll();

  $cut_date = strtotime('2018-01-01');
  $type = 'ef_factsheet';
  $dk_tid = get_default_deliverable_kind_by_ct($type);
  $service_type = get_service_type($dk_tid);
  $service_type = reset($service_type);

  foreach ($results as $key => $value) {
    $announcement_date = strtotime($value->field_ef_announcement_date_value);
    if ($announcement_date > $cut_date) {
      $nid = $value->nid;
      $vid = get_node_current_vid($nid);
      $node = node_load($nid, $vid);
      $node->field_ef_deliverable_kind['und'][0]['tid'] = $dk_tid;
      $node->field_ef_service_type['und'][0]['tid'] = $service_type;
      $node->field_ef_author_contract['und'][0]['tid'] = get_equivalent_new_contract($node->field_ef_author_contract['und'][0]['tid'], $contracts);
      $gid = $node->field_ef_assign_to_country_group['und'][0]['target_id'];
      $group = group_load($gid);
      $pos = strpos($group->title, '2014-2018');
      if ($pos !== false) {
        $period = '/ 2014-2018/';
        $replace = '';
        $new_country_group_name = preg_replace($period, $replace, $group->title);
        foreach ($groups as $gid => $title) {
          if ($title == $new_country_group_name) {
            $node->field_ef_assign_to_country_group['und'][0]['target_id'] = $gid;
          }
        }
      }
      $user = get_user_by_mid($node->field_ef_assign_to_author['und'][0]['target_id']);
      if (!isset($user->uid)) {
        $node->field_ef_assign_to_author['und'][0]['target_id'] = get_leader_mid_by_gid($node->field_ef_assign_to_country_group['und'][0]['target_id']);
      }
      field_attach_update('node', $node);
      print_r('values updated || ');
      entity_get_controller('node')->resetCache(array($node->nid));
      print_r('cache updated || ');
    }
  }

  //ERM Regulations
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'));
  $query->condition('n.type', 'ef_erm_regulation');

  $results = $query->execute()->fetchCol();

  $type = 'ef_erm_regulation';
  $dk_tid = get_default_deliverable_kind_by_ct($type);
  $service_type = get_service_type($dk_tid);
  $service_type = reset($service_type);

  foreach ($results as $nid) {
    $vid = get_node_current_vid($nid);
    $node = node_load($nid, $vid);
    //WGS-367 requirement: Approved for Payment must be empty for 
    //Support Instruments and Regulations
    $node->field_approved_payment_erm_reg = array();
    $node->field_ef_deliverable_kind['und'][0]['tid'] = $dk_tid;
    $node->field_ef_service_type['und'][0]['tid'] = $service_type;
    $node->field_ef_author_contract['und'][0]['tid'] = get_equivalent_new_contract($node->field_ef_author_contract['und'][0]['tid'], $contracts);
    $gid = $node->field_ef_assign_to_country_group['und'][0]['target_id'];
    $group = group_load($gid);
    $pos = strpos($group->title, '2014-2018');
    if ($pos !== false) {
      $period = '/ 2014-2018/';
      $replace = '';
      $new_country_group_name = preg_replace($period, $replace, $group->title);
      foreach ($groups as $gid => $title) {
        if ($title == $new_country_group_name) {
          $node->field_ef_assign_to_country_group['und'][0]['target_id'] = $gid;
        }
      }
    }
    $user = get_user_by_mid($node->field_ef_assign_to_author['und'][0]['target_id']);
    if (!isset($user->uid)) {
      $node->field_ef_assign_to_author['und'][0]['target_id'] = get_leader_mid_by_gid($node->field_ef_assign_to_country_group['und'][0]['target_id']);
    }
    field_attach_update('node', $node);
    print_r('values updated || ');
    entity_get_controller('node')->resetCache(array($node->nid));
    print_r('cache updated || ');
  }
}