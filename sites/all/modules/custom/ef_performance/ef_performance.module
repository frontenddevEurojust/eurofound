<?php

/**
  * This module will be used to alter unwanted behaviors
  * affecting performance, and provides a script to delete
  * and archive old revisions.
  */

/**
 * Implements hook_views_query_alter
 */
function ef_performance_views_query_alter(&$view, &$query) {
  if ($view->name == 'custom_taxonomy_term_display') {
    $tid = $view->args[0];
    //run taxonomy_index subquery
    $subquery = db_select('taxonomy_index', 'ti')
      ->fields('ti', array('nid'))
      ->condition('ti.tid', $tid);
    $result = $subquery->execute();
    //get an array of nids
    $related_nids = $result->fetchAll();
    foreach ($related_nids as $key => $item) {
      $nids[] = $item->nid;
    }
    //Change the condition nid is in array of nids
    $query->where[0]['conditions'][0]['value'] = $nids;
  }
}

/**
 * Main function to perform WEM-958 task:
 *   - WP2 - Archive old content revisions - Revisions removal
 * 
 * @param string $date
 *   This function will process all nodes older than this date
 *   FORMAT: d-m-Y
 *
 */
function _delete_and_remove_old_revisions($content_type = NULL, $date = NULL) {
  if (is_null($date)) {
    $date = strtotime('01-01-2016');
  }

  //Get node IDs and related data
  $query = db_select('node', 'n')->distinct();
  $query->addJoin('INNER', 'node_revision', 'nr', 'n.nid = nr.nid');
  if (isset($content_type)) {
    $query->condition('n.type', $content_type);
  }
  $query->fields('n', array('nid', 'vid', 'type', 'title'));
  
  $result = $query->execute();
  $nids = $result->fetchAll();

  //Special requirements for these types
  $exception_types = array('erm_support_instrument', 'ef_erm_regulation');

  //Get all revisions
  foreach ($nids as $key => $item){
    $query = db_select('node_revision', 'nr')->distinct();
    $query->fields('nr', array('vid'));
    $query->condition('nr.nid', $item->nid);
    if (!in_array($item->type, $exception_types)) {
      $query->condition('nr.timestamp', $date, '<');
    }
  
    $result = $query->execute();
    $vids = $result->fetchAll();

    if (!empty($vids)) {
      $nodes_to_be_cropped[$item->nid]['vid'] = $item->vid;
      $nodes_to_be_cropped[$item->nid]['type'] = $item->type;
      $nodes_to_be_cropped[$item->nid]['title'] = $item->title;
      foreach ($vids as $key => $vid_obj) {
        $nodes_to_be_cropped[$item->nid]['all_revisions'][] = $vid_obj->vid; 
      }
    }
  }

  //Now we got the nodes, let's manage them
  _save_old_revisions_to_drupal_archive($nodes_to_be_cropped);

  return;
}


/**
 * Saves the old revisions in the new database
 * 
 * @param array $nids
 *   IDs of the nodes to be cropped
 *
 */
function _save_old_revisions_to_drupal_archive($cropped) {
  if (!empty($cropped)) {
    foreach ($cropped as $nid => $data) {
      //Get the revision IDs to be archived
      $revisions = _custom_revision_list($nid, $data);

      if (!empty($revisions)) {
        //This function contains the CRUD
        _save_records_from_old_revisions($nid, $data['type'], $revisions);
        //Prepare data for the csv output
        $csv_output_data = array($nid, $data['title'], implode(',', $revisions));
        //This function will append this data
        _write_output_csv_file($csv_output_data);
      }
    }
  }

  return;
}

/**
 * Gets the list of revisions to be archived
 * 
 * @param array $nid
 *   ID of the node
 *
 * @param array $pub_vid
 *   ID of the published revision
 *
 * @return array $archived_vids
 *   An array of the revisions that will be archived
 */
function _custom_revision_list($nid, $data) {
  //Queries to get both revision IDs before publication and
  //all revision IDs

  $revisions = db_select('node_revision', 'nr')
          ->fields('nr', array('vid'))
          ->condition('nr.nid', $nid)
          ->execute();
  $count_revisions = $revisions->rowCount();

  $exception_types = array('erm_support_instrument', 'ef_erm_regulation');

  if ($count_revisions > 3 && !in_array($data['type'], $exception_types)) {
    foreach ($data['all_revisions'] as $key => $vid) {
      if (isset($data['vid'])) {
        if ($data['vid'] > $vid){
          $archived_vids[] = $vid;
        }
      }
    }
  }
  elseif (in_array($data['type'], $exception_types)) {
    foreach ($data['all_revisions'] as $key => $vid) {
      if (isset($data['vid'])) {
        if ($data['vid'] > $vid){
          $archived_vids[] = $vid;
        }
      }
    }
  }
  else {
    return;
  }

  return $archived_vids;
}

/**
 * Gets the data and writes the report in a csv file
 * 
 * @param array $nid
 *   ID of the node
 *
 * @param array $pub_vid
 *   ID of the published revision
 *
 * @return array $archived_vids
 *   An array of the revisions that will be archived
 */
function _write_output_csv_file($data) {
  //Open file
  $csv = fopen('sites/default/files/deleted_revisions.csv', 'a');
  //Write file with the previously prepared array
  //fputcsv($csv, $data);
  //Close file
  while(is_resource($csv)){
    //Handle still open
    fclose($csv);
  }
}

/**
 * Gets all the data to the archive DB
 * 
 * @param array $nid
 *   ID of the node
 *
 * @param array $bundle
 *   Machine name of the Content Type
 *
 * @param array $revisions
 *   An array of vids of the revisions to be archived
 *
 */
function _save_records_from_old_revisions($nid, $bundle, $revisions) {
  
  //Get field configuration by content type
  $fields = field_info_instances('node', $bundle);
  foreach ($fields as $key => $field_name) {
    //Get the table where values are stored by field
    $field = field_info_field($key);
    $tables[] = key($field['storage']['details']['sql']['FIELD_LOAD_REVISION']);
  }

  //Add data for the DB connection from the application
  $other_database = array(
    'database' => 'drupal_archive',
    'username' => 'root',
    'password' => 'Geppett0', 
    'host' => 'localhost', 
    'driver' => 'mysql',
  );
  Database::addConnectionInfo('archive', 'default', $other_database);
  
  //Get all the data from the production environment
  foreach ($tables as $key => $table) {
    $query = db_select($table, 't');
    $query->fields('t');
    $query->condition('t.entity_id', $nid);
    $query->condition('t.revision_id', $revisions, 'IN');

    $result = $query->execute();
    $records_array[$table] = $result->fetchAll();
  }

  foreach ($revisions as $key => $revision) {
    $query = db_select('workbench_moderation_node_history', 'nh');
    $query->fields('nh');
    $query->condition('nh.nid', $nid);
    $query->condition('nh.vid', $revisions, 'IN');

    $result = $query->execute();
    $records_array['workbench_moderation_node_history'] = $result->fetchAll();
  }

  foreach ($revisions as $key => $revision) {
    $query = db_select('node_revision', 'nr');
    $query->fields('nr');
    $query->condition('nr.nid', $nid);
    $query->condition('nr.vid', $revisions, 'IN');

    $result = $query->execute();
    $records_array['node_revision'] = $result->fetchAll();
  }

  //Enable the secondary database
  db_set_active('archive');
  //Insert the archived data in the secondary database
  foreach ($records_array as $table => $records) {
    foreach ($records as $key => $record) {
      $fields = get_object_vars($record);
      try {
        $query = db_insert($table)->fields(array_keys($fields))->values($fields)->execute();
      }
      catch (Exception $e) {
        //this record will not be inserted, sorry
        //continue
      }
    }
  }
  //Enable again the production database
  db_set_active();

  //It will be better if we remove all the revisions using node_revision_delete
  foreach ($revisions as $key => $revision) {
    $result = node_revision_delete($revision);
    echo $result;
  }

  return;
}