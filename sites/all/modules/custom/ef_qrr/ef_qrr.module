<?php

/*
 *
 * @file
 *
 */



/*
 *
 * Implements hook_menu().
 *
 */
function ef_qrr_menu() {

  $items['admin/config/content/ef-qrr'] = array(
    'title' => 'EF Quality Ratings and Reporting configuration',
    'description' => 'Administration settings for EF QRR module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ef_qrr_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ef_qrr.admin.inc',
  );

  $items['admin/content/ef-qrr'] = array(
     'title' => 'Quality Ratings',
     'description' => 'Quality Rating and Reporting',
     'type' => MENU_NORMAL_ITEM,
     'page callback' => 'drupal_get_form',
     'page arguments' => array('ef_qrr_quality_rating'),
     'access arguments' => array('view content quality rating'),
     'file' => 'ef_qrr.admin.inc',
     'weight' => 0,
  );

  $items['admin/content/ef-qrr/ratings']  = array(
     'title' => t('Quality rating'),
     'description' => 'Quality rating for content',
     'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM | MENU_DEFAULT_LOCAL_TASK,
     'page callback' => 'drupal_get_form',
     'page arguments' => array('ef_qrr_quality_rating'),
     'parent' => 'admin/content/ef-qrr',
     'file' => 'ef_qrr.admin.inc',
     'access arguments' => array('view content quality rating'),
  );

  $items['admin/content/ef-qrr/comments']  = array(
     'title' => t('Comments and documents'),
     'description' => 'Comments and attached documents for revisions',
     'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
     'page callback' => 'drupal_get_form',
     'page arguments' => array('ef_qrr_comments_documents'),
     'parent' => 'admin/content/ef-qrr',
     'file' => 'ef_qrr.admin.inc',
     'access arguments' => array('view content quality rating'),
     'weight' => 1,
  );

  $items['admin/content/ef-qrr/status']  = array(
     'title' => 'Status actions',
     'description' => 'Content status management',
     'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
     'page callback' => 'drupal_get_form',
     'page arguments' => array('ef_qrr_status_actions'),
     'parent' => 'admin/content/ef-qrr',
     'file' => 'ef_qrr.admin.inc',
     'access arguments' => array('moderate content quality rating'),
     'weight' => 2,
  );

  $items['admin/content/ef-qrr/view-attachments/%']  = array(
     'title' => 'View attachments',
     'description' => 'View attached documents',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('ef_qrr_view_attachments', 4),
     'type' => MENU_CALLBACK,
     'file' => 'ef_qrr.admin.inc',
     'access arguments' => array('view content quality rating'),
  );

  $items['admin/content/ef-qrr/upload/%']  = array(
     'title' => 'Upload attachment',
     'description' => 'Upload documents',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('ef_qrr_upload_attachment', 4),
     'type' => MENU_CALLBACK,
     'file' => 'ef_qrr.admin.inc',
     'access arguments' => array('moderate content quality rating'),
  );

  $items['admin/content/ef-qrr/bulk-rating']  = array(
     'title' => 'Bulk ratings',
     'description' => 'Bulk rate contents',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('ef_qrr_bulk_ratings'),
     'type' => MENU_CALLBACK,
     'file' => 'ef_qrr.admin.inc',
     'access arguments' => array('view content quality rating'),
  );

  $items['admin/content/ef-qrr/bulk-afp']  = array(
     'title' => 'Bulk approved for payment',
     'description' => 'Bulk set approved for payment date',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('ef_qrr_bulk_afp'),
     'type' => MENU_CALLBACK,
     'file' => 'ef_qrr.admin.inc',
     'access arguments' => array('moderate content quality rating'),
  );

  $items['admin/content/ef-qrr/reset']  = array(
     'title' => 'Reset',
     'description' => 'Reset quality ratings',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('ef_qrr_reset'),
     'type' => MENU_CALLBACK,
     'file' => 'ef_qrr.admin.inc',
     'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/*
 *
 * Implements hook_permission().
 *
 */

function ef_qrr_permission() {
   $permissions = array(
      'quality rate content' => array(
         'title' => t('Quality rate contents'),
         'description' => t('Add or modify quality rating for contents'),
      ),
      'view content quality rating' => array(
         'title' => t('View contents\' quality ratings'),
         'description' => t('View quality ratings for contents'),
      ),
      'moderate content quality rating' => array(
         'title' => t('Moderate contents\' quality ratings'),
         'description' => t('Moderate content in quality ratings'),
      ),
   );

   return $permissions;
}

/*
 *
 * Implements hook_theme()
 *
 */

function ef_qrr_theme($existing, $type, $theme, $path) {
   return array(
      'ef_qrr_node_rating' => array('variables' => array())
      );
}

function theme_ef_qrr_node_rating($variables) {
}

function ef_qrr_init() {

  $previous_page = $_SERVER['HTTP_REFERER'];
  $host= $_SERVER["HTTP_HOST"];
  $url= $_SERVER["REQUEST_URI"];
  $current_page = "http://" . $host . $url;
  if(!strpos($current_page,"surveys")){
     $css = "fieldset.group-ef-quality-assessment { display: none; }\n";
     $css .= "div.qrr-info img { width: 20px; border: none; margin: 0 !important;}\n";
     $css .= "div.qrr-info { width: auto; float: right; }\n";
     drupal_add_css($css, 'inline');
     drupal_add_js( drupal_get_path('module', 'ef_qrr') . '/js/ef_qrr.js' );
     drupal_add_js(array('ef_qrr' => array('qrrTooltip' => _ef_qrr_tooltip_text())), 'setting');
  }
}
/*
 *
 * Forms
 *
 */

function _ef_qrr_tooltip_text() {
   $text = <<<EOF
<div><b>5* - Fully compliant:</b> meets requirements of the criterion completely.</div>
<div><b>4* - Almost fully compliant:</b> meets requirements almost completely but there are some points for improvement.</div>
<div><b>3* - Satisfactory:</b> meets the minimum requirements but has many points that can be improved.</div>
<div><b>2* - Weak:</b> most requirements are not met, requiring additional work and effort by the quality manager to bring it to an acceptable level.</div>
<div><b>1* - Unacceptable:</b> fails to comply with the requirements of the criterion completely â€“ should be redone.</div>
EOF;
   return $text;
}

function ef_qrr_form_node_form_alter( &$form, &$form_state ) {

  if ( isset($form_state['node']->nid ) &&
      user_access('quality rate content') &&
     _ef_qrr_allowed_content_type( $form_state['node']->type ))
  {
      $form['qrr'] =_ef_qrr_rating_fieldset($form_state['node']);
  }

  if ( _ef_qrr_allowed_content_type($form_state['node']->type) &&
     !isset($form['field_ef_approved_for_payment']['und'][0]['#date_items']['value']))
  {
    drupal_add_js(drupal_get_path('module','ef_qrr') . '/js/ef_qrr_node_edit_mode.js');
  }
}

/*
 *
 * Node rating form - it will be usually embedded into another form
 *
 */

function ef_qrr_node_rating($form, &$form_state, $node) {

   $form['qrr'] = _ef_qrr_rating_fieldset($node, false);

   $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save assessment')
   );

   $afp_field = field_get_items('node', $node, 'field_ef_approved_for_payment');

   if ( !empty($afp_field) ) {
      $afp_date = new DateTime($afp_field[0]['value']);
      $afp = date_format($afp_date, 'd/m/Y');

      $form['approved_for_payment'] = array(
         '#prefix' => '<div>',
         '#markup' => t('<strong>Approved for payment:</strong> :afp', array(':afp' => $afp)),
         '#suffix' => '</div>',
      );
   }

   return $form;
}

function ef_qrr_node_rating_submit($form, &$form_state) {

   // TODO: Unify ratings save procedure with node API

   global $user;

   $v = $form_state['values'];
   $revision = _ef_qrr_last_revision($v['nid'], $user->uid);
   $res = db_query("SELECT * FROM {qrr_rating_item} ORDER BY weight");

   $save = false;

   foreach ( $res as $row ) {

      $fname = 'qrr_rating_'.$v['nid'].'_'.$row->riid;

      if ( !empty($v[$fname]) ){
         $save = true;
         $ratings[$row->riid] = $v[$fname];
      }else
         $ratings[$row->riid] = NULL;
   }
   //if($save)
   {
    _ef_qrr_save_ratings( $v['nid'], $user->uid, $ratings, $v['qrr_comments'] );
   }
}

function _ef_qrr_rating_fieldset($node, $full = true, $info = true) {

   global $user;

   $qrr_form = array(
      '#cache' => false
   );

   if ( $info ) {
      $qrr_form['info'] = array(
         '#markup' => '<div class="qrr-info"><img src="/'.drupal_get_path('module', 'ef_qrr').'/images/info.png"></img></div>'
      );
   }


   $res = db_query("SELECT * FROM {qrr_rating_item} ORDER BY weight");

   foreach ( $res as $row ) {

      $rating = isset($node->qrr_ratings[$user->uid]['rating_'.$row->riid]) ?
         $node->qrr_ratings[$user->uid]['rating_'.$row->riid] : NULL ;

      $id = 'qrr_rating_'.($full ? $row->riid : $node->nid.'_'.$row->riid);

      $qrr_form[$id] = array(
         '#id' => $id,
         '#type' => 'fivestar',
         '#allow_clear' => true,
         '#title' => $row->name,
         '#description' =>  $full ? $row->description : '',
      );

      if ( $rating !== NULL )
         $qrr_form[$id]['#default_value'] = $rating;

   }

   $qrr_form['qrr_comments'] = array(
      '#type' => 'textarea',
      '#attributes' => array(
        'style' => array(
          'display:none;',
        ),
      ),
      '#resizable' => false,
      '#id' => "hidden_nid_".$node->nid,
      '#default_value' => isset($node->qrr_comments) ?  $node->qrr_comments : '',
   );

   if ( $full ) {

      $qrr_form['qrr_comments']['#type'] = 'textarea';

      $qrr_form['instructions'] = array(
         '#type' => 'markup',
         '#markup' => t('<b>Important:</b> Quality Assessment data will be stored upon node save'),
      );
   }

   $qrr_form['nid'] = array(
      '#type' => 'hidden',
      '#value' => $node->nid
   );

   return array_merge(
      array(
         '#type' => 'fieldset',
         '#title' => t('Quality Assessment'),
         '#id' => 'qrr_rating_fs_'.$node->nid,
         '#attributes' => array('class' => array('qrr-fieldset')),
      ),
      $qrr_form
   );
}

/*
 *
 * Node API hooks
 *
 */
function ef_qrr_node_view( $node, $view_mode, $langcode ) {

  if ($view_mode == 'full' &&
    user_access('view content quality rating') &&
    _ef_qrr_allowed_content_type($node->type)) {
    $node->content['qrr'] = drupal_get_form('ef_qrr_node_rating', $node);
  }
  else {
    unset($node->content['qrr']);
  }

}

/*
 *
 * Implements hook_ds_fields_info().
 *
 */
function ef_qrr_ds_fields_info($entity_type) {
  $fields = array();

  $fields['node']['qrr'] = array(
          'title' => t('Quality rating form'),
          'field_type' => DS_FIELD_TYPE_FUNCTION,
          'function' => '_ef_qrr_field',
          'ui_limit' => array('*|*'),
  );

  return $fields;
}


/*
 *
 * ef_qrr form field
 *
 */
function _ef_qrr_field($field) {
   $node = $field['entity'];

   $form = drupal_get_form('ef_qrr_node_rating', $node);

  // Build the form
  return drupal_render($form);
}

function ef_qrr_node_load( $nodes, $types) {
   global $user;

   foreach ( $nodes as $node ) {

      $nodes[$node->nid]->{'qrr_ratings'} = _ef_qrr_ratings($node->nid);

      $revision = _ef_qrr_last_revision($node->nid, $user->uid);

      if ( $revision != NULL ) {
         $rt_res = db_query(
            "SELECT * FROM {qrr_rating} rt ".
            "LEFT JOIN {qrr_rating_item} ri ON rt.riid = ri.riid ".
            "WHERE rt.rid = :rid", array(':rid' => $revision['rid'])
         );

         $nodes[$node->nid]->qrr_comments = $revision['comments'];

         foreach ( $rt_res as $rating ) {
            $nodes[$node->nid]->{'qrr_rating_'.$rating->riid} = $rating->rating;
         }
      }
   }
}

function _ef_qrr_ratings($nid) {

   $ratings = array();

   $rv_res = db_query(
      "SELECT rv.rid, rv.nid, rv.uid, rv.comments, rv.created ".
      "FROM {qrr_revision} rv ".
      "WHERE rv.nid = :nid ORDER BY uid,rid DESC",
      array(':nid' => $nid)
   );

   $uid = '';

   foreach ( $rv_res as $revision ) {
      $ratings[$revision->uid] = array(
         'rid' => $revision->rid,
         'created' => $revision->created,
         'comments' => $revision->comments
      );

      if ( $revision->uid == $uid )
         continue;

      $uid = $revision->uid;

      $rt_res = db_query(
         "SELECT rt.rid, rt.riid, rt.rating, rti.name ".
         "FROM {qrr_rating} rt ".
         "LEFT JOIN {qrr_rating_item} rti ON rti.riid = rt.riid ".
         "WHERE rt.rid = :rid", array(':rid' => $revision->rid)
      );

      foreach ( $rt_res as $r ) {
         $ratings[$uid]['rating_'.$r->riid] = $r->rating;
      }
   }

   return $ratings;
}

function ef_qrr_node_update( $node ) {
   global $user;

   $ratings = array();

   $res = db_query("SELECT * FROM {qrr_rating_item} ORDER BY weight");

   $save = false;

   foreach ( $res as $row ) {
      if ( !empty($node->{'qrr_rating_'.$row->riid}) ) {
         $save = true;
         $ratings[$row->riid] = $node->{'qrr_rating_'.$row->riid};
         unset ( $node->{'qrr_rating_'.$row->riid} );
      }
      else
         $ratings[$row->riid] = NULL;
   }

   if ( $save )
      _ef_qrr_save_ratings( $node->nid, $user->uid, $ratings, $node->qrr_comments );
}

function _ef_qrr_save_ratings ( $nid, $uid, $ratings, $comments = '' ) {

   $revision = _ef_qrr_last_revision($nid, $uid);

   if ( $revision == NULL ) {
      $rid = db_insert('qrr_revision')->
         fields(array(
            'nid' => $nid,
            'uid' => $uid,
            'created' => REQUEST_TIME,
            'comments' => $comments,
         )
      )->execute();

      foreach ( $ratings as $riid => $rating ) {
         db_insert('qrr_rating')->
            fields(array(
               'rid' => $rid,
               'riid' => $riid,
               'rating' => $rating,
            )
         )->execute();
      }
   }
   else
   {
      db_update('qrr_revision')->
         fields(array(
            'created' => REQUEST_TIME,
            'comments' => $comments,
         ))->
         condition('nid', $nid, '=')->
         condition('uid', $uid, '=')->
         execute();

      foreach ( $ratings as $riid => $rating ) {
        if ( $rating === NULL )
		{
			$rating = 0;
		}
		db_update('qrr_rating')->
		   fields(array(
			  'rating' => $rating,
		   ))->
		   condition('rid', $revision['rid'], '=')->
		   condition('riid', $riid, '=')->
		   execute();
      }
   }
   //Refresh cache on update event (BM-Maren)
   entity_get_controller('node')->resetCache(array($nid));
}

function _ef_qrr_last_revision($nid, $uid = NULL) {
   if ( $uid )
      $res = db_query(
         "SELECT r.*, u.name FROM {qrr_revision} r ".
         "LEFT JOIN {users} u ON u.uid = r.uid ".
         "WHERE nid = :nid AND u.uid = :uid ".
         "ORDER BY rid DESC LIMIT 1",
         array(':nid' => $nid, ':uid' => $uid)
      );
   else
      $res = db_query(
         "SELECT r.*, u.name FROM {qrr_revision} r ".
         "LEFT JOIN {users} u ON u.uid = r.uid ".
         "WHERE nid = :nid ".
         "ORDER BY rid DESC LIMIT 1",
         array(':nid' => $nid )
      );

   if ( $res->rowCount() > 0 ) {
      $revision = $res->fetchAssoc();

      $rt_res = db_query(
         "SELECT * FROM {qrr_rating} rt ".
         "LEFT JOIN {qrr_rating_item} ri ON rt.riid = ri.riid ".
         "WHERE rt.rid = :rid", array(':rid' => $revision['rid'])
      );

      foreach ( $rt_res as $rating ) {
         $revision['ratings'][$rating->riid] = $rating->rating;
      }
   }
   else
      $revision = NULL;

   return $revision;
}

function _ef_qrr_allowed_content_type($type) {
   $settings = variable_get('qrr_content_types');
   return !empty($settings['rating'][$type]);
}

function _ef_qrr_ratings_present($nid) {
   $num_ratings =
      db_query("SELECT rid FROM {qrr_revision} WHERE nid = :nid", array(':nid' => $nid))
      ->rowCount();

   if($num_ratings > 0){
    return TRUE;
   }
}

/*
 *
 * Checks if a given content has a rating
 *
 */

function has_qrr_rating($nid) {
  $res = db_query("SELECT r.nid FROM {qrr_revision} r WHERE nid=:nid", array(':nid' => $nid));
  foreach ( $res as $nid ) {
    $arr_res = $nid->nid;
  }
  return empty($arr_res) ? FALSE : TRUE;
}
// Added by BM
// Comments and Documents special case
function ef_qrr_form_alter(&$form,$form_state){

  $current_uri = "http://" . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"];

  if(strpos($current_uri,"admin/content/ef-qrr/comments")) {

    // Remove ef_regulation,ef_restructuring_in_smes,ef_support_instrument as there is no case to have a file
    unset($form['filter']['content_type']['#options']['ef_regulation']);
    unset($form['filter']['content_type']['#options']['ef_restructuring_in_smes']);
    unset($form['filter']['content_type']['#options']['ef_support_instrument']);
  }
}

/*
 *
 * Function to recover the ratings stored by the previous version of this feature
 *
 */
function recovery_old_fashioned_ratings() {

  $query = db_select('voting_rec', 'vr')
    ->fields('vr');
  $result = $query->execute();
  $previous_rating = 1;
  $ratings = array();
  foreach ($result as $row) {
    if (($row->nid == $previous_rating['nid'] && $row->uid == $previous_rating['uid']) || $previous_rating ==1) {
      $nid = $row->nid;
      $uid = $row->uid;
      $riid = translate_tag_to_riid($row->tag);
      $rating = array(
        $riid => $row->rating
      );
      $ratings = $ratings + $rating;
      $created = $row->timestamp;
      $previous_rating = array(
        'nid' => $row->nid,
        'uid' => $row->uid
      );
    }
    else {
      $ratings = complete_ratings($ratings);
      save_ratings($nid, $uid, $ratings, $created);
      $nid = $row->nid;
      $uid = $row->uid;
      $riid = translate_tag_to_riid($row->tag);
      $rating = array(
        $riid => $row->rating
      );
      $ratings = array();
      $ratings = $ratings + $rating;
      $created = $row->timestamp;
      $previous_rating = array(
        'nid' => $row->nid,
        'uid' => $row->uid
      );
    }
  }
}

/*
 *
 * Previous version of ratings had a tag system
 * The current one has an ID system
 * We need to convert the tags to the related ID
 *
 */
function translate_tag_to_riid($tag) {
  switch ($tag) {
    case 'quality':
      return 1;
      break;
    case 'balance':
      return 2;
      break;
    case 'style':
      return 3;
      break;
    case 'english':
      return 4;
      break;
    case 'criteria':
      return 5;
      break;
  }
}

/*
 *
 * Previous version of ratings saved rating items separately
 * so it was possible to create uncomplete rating items.
 * Now we have 5 rating items for each node and the rating
 * item must be completed
 *
 */
function complete_ratings($ratings) {
  for ($i = 1; $i <= 5; $i++) {
    if (!array_key_exists($i, $ratings)) {
      $riid = $i;
      $rating = array(
        $riid => 0
      );
      $ratings = $ratings + $rating;
    }
  }
  ksort($ratings);
  return $ratings;
}

/*
 *
 * Function to save the old ratings to the database
 *
 */
function save_ratings($nid, $uid, $ratings, $created) {

  $revision = _ef_qrr_last_revision($nid, $uid);
  $comments = '';
  if ( $revision == NULL ) {
    $rid = db_insert('qrr_revision')->
      fields(array(
        'nid' => $nid,
        'uid' => $uid,
        'created' => $created,
        'comments' => $comments,
        )
      )->execute();

      foreach ( $ratings as $riid => $rating ) {
        db_insert('qrr_rating')->
          fields(array(
            'rid' => $rid,
            'riid' => $riid,
            'rating' => $rating,
      ))->execute();
    }
  }
  else {
    db_update('qrr_revision')->
      fields(array(
        'created' => $created,
        'comments' => $comments,
      ))->
      condition('nid', $nid, '=')->
      condition('uid', $uid, '=')->
      execute();

    foreach ( $ratings as $riid => $rating ) {
      if ( $rating !== NULL )
        db_update('qrr_rating')->
          fields(array(
            'rating' => $rating,
          ))->
          condition('rid', $revision['rid'], '=')->
          condition('riid', $riid, '=')->
          execute();
    }
  }
  //Refresh cache on update event (BM-Maren)
  entity_get_controller('node')->resetCache(array($nid));

}